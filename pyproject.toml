[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dataiku-cloud-optimizer"
version = "0.1.0"
description = "Dataiku-driven agent to optimize multi-cloud (AWS, Azure, GCP) and Databricks workloads"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Dataiku Cloud Optimizer Team"}
]
keywords = ["dataiku", "cloud", "optimization", "aws", "azure", "gcp", "databricks"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "pyyaml>=6.0",
    "boto3>=1.28.0",
    "azure-identity>=1.13.0",
    "azure-mgmt-costmanagement>=4.0.0",
    "google-cloud-billing>=1.12.0",
    "databricks-sdk>=0.8.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "fastapi>=0.112.0",
    "uvicorn[standard]>=0.30.0",
    "apscheduler>=3.10.4",
    "openai>=1.40.0",
    "slack_sdk>=3.27.0",
    "jinja2>=3.1.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]
terraform = [
    "python-terraform>=0.10.1",
]

[project.scripts]
dataiku-optimizer = "dataiku_cloud_optimizer.cli:main"

[project.urls]
"Homepage" = "https://github.com/omrhamda/dataiku-cloud-optimizer-agent"
"Bug Tracker" = "https://github.com/omrhamda/dataiku-cloud-optimizer-agent/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["E501", "B008", "C901"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py38']
include = '\.pyi?$'
line-length = 88

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]